{"version":3,"sources":["logo.svg","Components/demo.js","Components/launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Demo","_this","this","root","FHIR","oauth2","ready","smart","console","log","setState","smartData","JSON","parse","stringify","patient","id","react_default","a","createElement","state","Component","Launch","authorize","client_id","scope","redirect_uri","ReactRouter","require","Router","HashRouter","Route","Switch","App","Redirect","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6MCuBzBC,qMAnBU,IAAAC,EAAAC,KACjBC,IAAKC,KAAKC,OAAOC,MAAM,SAACC,GACpBC,QAAQC,IAAI,iBACZD,QAAQC,IAAIF,GACZN,EAAKS,SAAS,CACVC,UAAWC,KAAKC,MAAMD,KAAKE,UAAUP,IAAQQ,QAAQC,wCAM7D,OADAR,QAAQC,IAAI,iBAEJQ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wBAAgBjB,KAAKkB,MAAMT,mBAf5BU,cCmBJC,8LAjBPd,QAAQC,IAAI,gBACZN,IAAKC,KAAKC,OAAOkB,UAAU,CACvBC,UAAW,uCACXC,MAAO,oFACPC,aAAc,kGAKlB,OACQT,EAAAC,EAAAC,cAAA,2BAZKE,aCEjBM,EAAcC,EAAQ,IACtBC,EAASF,EAAYG,WACrBC,EAAQJ,EAAYI,MACpBC,EAASL,EAAYK,OAgBVC,GAfAN,EAAYO,0LAIvB,OACEjB,EAAAC,EAAAC,cAACU,EAAD,KACIZ,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAACY,EAAD,CAAOI,KAAK,UAAUC,UAAWd,IACjCL,EAAAC,EAAAC,cAACY,EAAD,CAAOI,KAAK,QAAQC,UAAWpC,aANzBqB,cCCEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAc1C,MAAM2C,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5032a194.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport root from 'window-or-global'\nimport 'fhirclient';\nclass Demo extends Component{\n      componentDidMount(){\n        root.FHIR.oauth2.ready((smart) => {\n            console.log(\"smart in demo\")\n            console.log(smart)\n            this.setState({\n                smartData: JSON.parse(JSON.stringify(smart)).patient.id\n              })\n        });\n      }\n    render(){\n        console.log(\"render called\")\n        return(\n                <div>\n                    <h1>Demo!!</h1>\n                    <p>patient id: {this.state.smartData}</p>\n                </div>\n            );\n    }\n}\nexport default Demo;","import React, { Component } from 'react';\nimport root from 'window-or-global'\nimport 'fhirclient';\nclass Launch extends Component{\n      componentDidMount(){\n        console.log(\"in launch...\");\n        root.FHIR.oauth2.authorize({\n            client_id: 'a8ba127e-8adf-4f03-9916-efee885a5cab',\n            scope: 'patient/Patient.read patient/Observation.read launch online_access openid profile',\n            redirect_uri: 'https://bs062721.github.io/React-smart-app-no-webpack/#/demo',\n          });\n      }\n\n      render(){\n        return(\n                <div>\n                  error\n                </div>\n            );\n    }\n}\n\nexport default Launch;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Demo from './Components/demo';\nimport Launch from './Components/launch'\nvar ReactRouter = require('react-router-dom');\nvar Router = ReactRouter.HashRouter;\nvar Route = ReactRouter.Route;\nvar Switch = ReactRouter.Switch;\nvar Redirect = ReactRouter.Redirect;\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n          <Switch>\n            <Route path='/launch' component={Launch} />\n            <Route path='/demo' component={Demo} />\n          </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}